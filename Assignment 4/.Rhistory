installed.packages()))
#If FALSE, install package XLConnect:
install.packages("XLConnectJars")
install.packages("XLConnect")
install.packages("rJava")
install.packages("rpart")
#or (used this)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(XLConnectJars)
library(XLConnect)
library(rJava)
library(XLConnect)
titanic_train<- readWorksheetFromFile("Desktop/Titanic_train.csv", sheet = 1)
titanic_train
titanic_test<- readWorksheetFromFile("Desktop/Titanic_test.csv", sheet = 1)
titanic_test
titanic_train=read.csv("Desktop/Titanic_train.csv")
titanic_test=read.csv("Desktop/Titanic_test.csv")
titanic_test
titanic_train
library(rpart)
model.treedataset=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=trained_dataset,method="class")
prp(model.treedataset)
rpart.plot(model.treedataset)
model.treedataset=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=titanic_train,method="class")
prp(model.treedataset)
rpart.plot(model.treedataset)
library(rpart)
model.treedataset=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=titanic_train,method="class")
prp(model.treedataset)
rpart.plot(model.treedataset)
library(rpart)
model.treedataset=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=titanic_train,method="class")
prp(model.treedataset)
library(XLConnect)
titanic_train=read.csv("Desktop/Titanic_train.csv")
titanic_train
titanic_test=read.csv("Desktop/Titanic_test.csv")
titanic_test
model.treedataset=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=titanic_train, method="class")
model.treedataset
rpart.plot(tree_model)
?rpart
library(XLConnect)
energy_data = readWorksheetFromFile("Desktop/Energy_Efficiency.xlsx",sheet = 1)
energy_data
energy_data
energy_train
energy_train<-floor(0.8 * nrow(energy_data))
energy_train
set.seed(13)
train_ind<-sample(seq_len(nrow(energy_data)),size = energy_train)
train_ind
train_data = energy_data[train_ind,]
test_data = energy_data[-train_ind,]
test_data
train_data
premodel = rpart(Y2~ X1+X2+X3+X4+X5+X6+X7+X8,data = train_data, method="anova")
premodel1 = rpart(Y1~ X1+X2+X3+X4+X5+X6+X7+X8,data = train_data, method="anova")
premodel1
premodel
p1= predict(premodel,test_data,type = "vector")
p= predict(premodel1,test_data,type = "vector")
plot(p1,type='h',col="green",ylim=c(10,max(p1,p)))
train_data
lines(p,type='h',lty=2,col="red")
library(XLConnect)
titanic_train=read.csv("Desktop/Titanic_train.csv")
titanic_train
titanic_test=read.csv("Desktop/Titanic_test.csv")
titanic_test
library(rpart)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("rpart.plot")
install.packages("rpart")
tree_model=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked, data=titanic_train, method="class")
tree_model
prp(tree_model)
rpart.plot(tree_model)
install.packages("rpart.plot")
install.packages("Rcpp")
library(rpart)
library(rpart.plot)
tree_model=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked, data=titanic_train, method="class")
tree_model
prp(tree_model)
rpart.plot(tree_model)
Prediction_data <- predict(tree_model, train_test, type = "class")
Prediction_data <- predict(tree_model, titanic_test, type = "class")
submit_data <- data.frame(Name = test_dataset$Name, Survived = Prediction)
submit_data <- data.frame(Name = titanic_test$Name, Survived = Prediction)
submit_data <- data.frame(Name = titanic_test$Name, Survived = Prediction_data)
plot(Prediction_data,type='h',col="green",ylim=c(10,max(p1,p)))
lines(Prediction_data,type='h',lty=2,col="red")
library(XLConnect)
energy_data = readWorksheetFromFile("Desktop/Energy_Efficiency.xlsx",sheet = 1)
energy_data
energy_train<-floor(0.8 * nrow(energy_data))
set.seed(13)
train_ind<-sample(seq_len(nrow(energy_data)),size = energy_train)
train_ind
train_data = energy_data[train_ind,]
train_data
test_data = energy_data[-train_ind,]
test_data
premodel = rpart(Y2~ X1+X2+X3+X4+X5+X6+X7+X8, data = train_data, method="anova")
premodel
premodel1 = rpart(Y1~ X1+X2+X3+X4+X5+X6+X7+X8, data = train_data, method="anova")
premodel1
p1= predict(premodel,test_data,type = "vector")
p= predict(premodel1,test_data,type = "vector")
plot(p1,type='h',col="green",ylim=c(10,max(p1,p)))
lines(p,type='h',lty=2,col="red")
?rpart
?rpart.plot
?rpart
?prp
library(XLConnect)
energy_data = readWorksheetFromFile("Desktop/Energy_Efficiency.xlsx",sheet = 1)
energy_data
energy_train<-floor(0.8 * nrow(energy_data))
energy_train
set.seed(13)
train_ind<-sample(seq_len(nrow(energy_data)),size = energy_train)
train_ind
train_data = energy_data[train_ind,]
train_data
test_data = energy_data[-train_ind,]
test_data
modelY2 = rpart(Y2~ X1+X2+X3+X4+X5+X6+X7+X8, data = train_data, method="anova")
model
modelY2
model1Y1 = rpart(Y1~ X1+X2+X3+X4+X5+X6+X7+X8, data = train_data, method="anova")
modelY1
modelY1 = rpart(Y1~ X1+X2+X3+X4+X5+X6+X7+X8, data = train_data, method="anova")
modelY1
p1= predict(modelY2,test_data,type = "vector")
p= predict(modelY1,test_data,type = "vector")
plot(p1,type='h',col="green",ylim=c(10,max(p1,p)))
lines(p,type='h',lty=2,col="red")
library(XLConnect)
titanic_train=read.csv("Desktop/Titanic_train.csv")
titanic_train
titanic_test=read.csv("Desktop/Titanic_test.csv")
titanic_test
library(rpart)
library(rpart.plot)
tree_model=rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked, data=titanic_train, method="class")
tree_model
prp(tree_model)
rpart.plot(tree_model)
prp(tree_model)
rpart.plot(tree_model)
plot(p1,type='h',col="green",ylim=c(10,max(p1,p)))
c
lines(p,type='h',lty=2,col="red")
library(dendextend)
install.packages("dendextend")
install.packages("corrplot")
library(dendextend)
library(corrplot)
animals <- cluster::animals
colnames(animals) <- c("warm-blooded",
"can fly",
"vertebrate",
"endangered",
"live in groups",
"have hair")
dend_r <- animals %>% dist(method = "man") %>% hclust(method = "ward.D") %>% as.dendrogram %>% ladderize %>%
color_branches(k=4)
dend_c <- t(animals) %>% dist(method = "man") %>% hclust(method = "com") %>% as.dendrogram %>% ladderize%>%
color_branches(k=3)
some_col_func <- function(n) (colorspace::diverge_hcl(n, h = c(246, 40), c = 96, l = c(65, 90)))
gplots::heatmap.2(as.matrix(animals-1),
main = "Attributes of Animals",
srtCol = 35,
Rowv = animals,
Colv = t(animals),
trace="row", hline = NA, tracecol = "darkgrey",
margins =c(6,3),
key.xlab = "no / yes",
denscol = "grey",
density.info = "density",
col = some_col_func
)
animals <- cluster::animals
colnames(animals) <- c("warm-blooded",
"can fly",
"vertebrate",
"endangered",
"live in groups",
"have hair")
dend_r <- animals %>% dist(method = "man") %>% hclust(method = "ward.D") %>% as.dendrogram %>% ladderize %>%
color_branches(k=4)
dend_c <- t(animals) %>% dist(method = "man") %>% hclust(method = "com") %>% as.dendrogram %>% ladderize%>%
color_branches(k=3)
some_col_func <- function(n) rev(colorspace::heat_hcl(n, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
some_col_func <- colorspace::diverge_hcl
some_col_func <- colorspace::sequential_hcl
some_col_func <- function(n) (colorspace::diverge_hcl(n, h = c(246, 40), c = 96, l = c(65, 90)))
par(mar = c(3,3,3,3))
library(gplots)
gplots::heatmap.2(as.matrix(animals-1),
main = "Attributes of Animals",
srtCol = 35,
Rowv = animals,
Colv = t(animals),
trace="row", hline = NA, tracecol = "darkgrey",
margins =c(6,3),
key.xlab = "no / yes",
denscol = "grey",
density.info = "density",
col = some_col_func
)
library(ggplots)
install.packages("gplots")
library(gplots)
gplots::heatmap.2(as.matrix(animals-1),
main = "Attributes of Animals",
srtCol = 35,
Rowv = animals,
Colv = t(animals),
trace="row", hline = NA, tracecol = "darkgrey",
margins =c(6,3),
key.xlab = "no / yes",
denscol = "grey",
density.info = "density",
col = some_col_func
)
hclust_methods <- c("ward.D", "single", "complete", "average", "mcquitty",
"median", "centroid", "ward.D2")
animals_dendlist <- dendlist()
hclust_methods <- c("ward.D", "single", "complete", "average", "mcquitty",
"median", "centroid", "ward.D2")
animals_dendlist <- dendlist()
for(i in seq_along(hclust_methods)) {
tmp_dend <-  animals %>% dist(method = "man") %>%
hclust(method = hclust_methods[i]) %>% as.dendrogram
animals_dendlist <- dendlist(animals_dendlist, tmp_dend)
}
names(animals_dendlist) <- hclust_methods
votes.repub_dendlist
cophenetic_cors <- cor.dendlist(animals_dendlist)
corrplot::corrplot(cophenetic_cors, "pie", "lower")
remove_median <- dendlist(animals_dendlist, which = c(1:8)[-6] )
FM_cors <- cor.dendlist(remove_median, method = "FM_index", k = 4)
corrplot::corrplot(FM_cors, "pie", "lower")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
clusterPlot <- function(type) {
clusters <- hclust(dist(iris[, 3:4]), method = type)
plot(clusters)
clusterCut <- cutree(clusters, 3)
show(table(clusterCut, iris$Species)) # show required, else will not print
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$Species)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
}
clusterPlot('complete')
clusterPlot('average')
clusterPlot('single')
clusterPlot('ward.D')
data(mtcars)
mydata <- mtcars
mydata <- na.omit(mydata) # listwise deletion of missing
mydata <- scale(mydata) # standardize variables
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
fit <- kmeans(mydata, 5) # 5 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
fit <- kmeans(mydata, 5) # 5 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
fit <- hclust(d, method="ward.D")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
rect.hclust(fit, k=5, border="red")
library(datasets)
head(iris)
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
mydata <- iris
mydata$Species <- NULL
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:10) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
for (i in 2:10) wss[i] <- sum(kmeans(mydata, centers=i)$betweenss)
plot(1:10, wss, type="b", xlab="Number of Clusters", ylab="Between groups sum of squares")
library(ggplot2)
library(XLConnect)
install.packages("XLConnect")
install.packages("XLConnect")
play <- readWorksheetFromFile("C:/MY FILES/Data/Play/play.xlsx", sheet = 1)
submit_data <- data.frame(Name = titanic_test$Name, Survived = Prediction_data)
install.packages("ggplot2")
install.packages("XLConnect")
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
play
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
clusters <- hclust(dist(play[, 2:3]), method = 'average')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
ggplot(play, aes(play$Temperature, play$Humidity, color = play$Decision)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
install.packages("ggplot2")
library(ggplot2)
clusterPlot <- function(type) {
clusters <- hclust(dist(iris[, 3:4]), method = type)
plot(clusters)
clusterCut <- cutree(clusters, 3)
show(table(clusterCut, iris$Species)) # show required, else will not print
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$Species)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
}
clusterPlot('complete')
clusterPlot('average')
clusterPlot('single')
clusterPlot('complete')
clusterPlot('average')
clusterPlot('single')
install.packages("dendextend")
install.packages("corrplot")
library(dendextend)
library(corrplot)
animals <- cluster::animals
colnames(animals) <- c("warm-blooded",
"can fly",
"vertebrate",
"endangered",
"live in groups",
"have hair")
dend_r <- animals %>% dist(method = "man") %>% hclust(method = "ward.D") %>% as.dendrogram %>% ladderize %>%
color_branches(k=4)
dend_c <- t(animals) %>% dist(method = "man") %>% hclust(method = "com") %>% as.dendrogram %>% ladderize%>%
color_branches(k=3)
some_col_func <- function(n) rev(colorspace::heat_hcl(n, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
some_col_func <- colorspace::diverge_hcl
some_col_func <- colorspace::sequential_hcl
some_col_func <- function(n) (colorspace::diverge_hcl(n, h = c(246, 40), c = 96, l = c(65, 90)))
par(mar = c(3,3,3,3))
library(gplots)
gplots::heatmap.2(as.matrix(animals-1),
main = "Attributes of Animals",
srtCol = 35,
Rowv = animals,
Colv = t(animals),
trace="row", hline = NA, tracecol = "darkgrey",
margins =c(6,3),
key.xlab = "no / yes",
denscol = "grey",
density.info = "density",
col = some_col_func
)
hclust_methods <- c("ward.D", "single", "complete", "average", "mcquitty",
"median", "centroid", "ward.D2")
animals_dendlist <- dendlist()
for(i in seq_along(hclust_methods)) {
tmp_dend <-  animals %>% dist(method = "man") %>%
hclust(method = hclust_methods[i]) %>% as.dendrogram
animals_dendlist <- dendlist(animals_dendlist, tmp_dend)
}
names(animals_dendlist) <- hclust_methods
votes.repub_dendlist
for(i in seq_along(hclust_methods)) {
tmp_dend <-  animals %>% dist(method = "man") %>%
hclust(method = hclust_methods[i]) %>% as.dendrogram
animals_dendlist <- dendlist(animals_dendlist, tmp_dend)
}
names(animals_dendlist) <- hclust_methods
votes.repub_dendlist
cophenetic_cors <- cor.dendlist(animals_dendlist)
corrplot::corrplot(cophenetic_cors, "pie", "lower")
corrplot::corrplot(cophenetic_cors, "pie", "lower")
corrplot::corrplot(cophenetic_cors, "pie", "lower")
corrplot::corrplot(cophenetic_cors, "pie", "lower")
remove_median <- dendlist(animals_dendlist, which = c(1:8)[-6] )
FM_cors <- cor.dendlist(remove_median, method = "FM_index", k = 4)
corrplot::corrplot(FM_cors, "pie", "lower")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
clusterPlot <- function(type) {
clusters <- hclust(dist(iris[, 3:4]), method = type)
plot(clusters)
clusterCut <- cutree(clusters, 3)
show(table(clusterCut, iris$Species)) # show required, else will not print
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$Species)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
}
clusterPlot('complete')
clusterPlot('average')
clusterPlot('single')
clusterPlot('ward.D')
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
play
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("XLConnect")
install.packages("XLConnect")
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
play
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
clusters <- hclust(dist(play[, 2:3]), method = 'average')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
ggplot(play, aes(play$Temperature, play$Humidity, color = play$Decision)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
data(mtcars)
mydata <- mtcars
mydata <- na.omit(mydata) # listwise deletion of missing
mydata <- scale(mydata) # standardize variables
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
fit <- kmeans(mydata, 5) # 5 cluster solution
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
rect.hclust(fit, k=5, border="red")
library(datasets)
head(iris)
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
mydata <- iris
mydata$Species <- NULL
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:10) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
for (i in 2:10) wss[i] <- sum(kmeans(mydata, centers=i)$betweenss)
plot(1:10, wss, type="b", xlab="Number of Clusters", ylab="Between groups sum of squares")
#If FALSE, install package XLConnect:
install.packages("XLConnectJars")
install.packages("XLConnect")
install.packages("rJava")
#or (used this)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(XLConnectJars)
library(XLConnect)
library(rJava)
install.packages("XLConnectJars")
install.packages("rJava")
install.packages("XLConnect")
install.packages("XLConnect")
library(XLConnect)
loan<- readWorksheetFromFile("Desktop/loan.xlsx", sheet = 1)
library(XLConnect)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("Desktop/play.xlsx", sheet = 1)
play <- readWorksheetFromFile("play.xlsx", sheet = 1)
play
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
clusters <- hclust(dist(play[, 2:3]), method = 'average')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
ggplot(play, aes(play$Temperature, play$Humidity, color = play$Decision)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
